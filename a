const express = require('express');
var session = require('express-session');
// const session = require('session');
const router = express.Router();
const db = require('../config/database');
const Product = require('../models/Product');
const User = require('../models/User');
const Favorite = require('../models/Favorite');
const Sequelize = require('sequelize');
// const Op = Sequelize.Op;

// Get Product list
router.get('/page/:page', (req, res) => {
    Product.findAll({
        where: { ban: 0 },
        // order: [ ['favorite', 'DESC'], ['love', 'DESC'] ],
        // offset: (req.params.page - 1) * 5,
        // limit: 5
    })
    .then(products => res.render('products', {
        products,
        count: 3,
        user_name: session.full_name,
        admin: session.admin
    }))
    .catch(err => console.log(err))
});

//for admin
router.get('/ban', (req, res) =>
    Product.findAll({
        where: {
            ban: 1
        }
    })
    .then(products => {
        Favorite.findAll({
                where: {
                    google_id: session.google_id
                }
            })
            .then(favorites => {
                favorites.forEach(function(item) {
                    console.log("item");
                    console.log(item);
                })
            })
        res.render('products', { products, user_name: session.full_name })
    })
    .catch(err => console.log(err)));
//make admin

//for each member
router.get('/dislike', (req, res) =>
    Favorite.findAll({
        where: {
            google_id: session.google_id,
            hate: 1
        }
    })
    .then(favorites => Product.findAll({
            where: {
                product_id: (favorites.map(favorite => favorite.product_id))
            }
        })
        .then(
            products => res.render('products', {
                products,
                count: 3,
                user_name: session.full_name,
                admin: session.admin
            }))
        .catch(err => console.log(err))
    )
    .catch(err => console.log(err)));
router.get('/like', (req, res) =>
    Favorite.findAll({
        where: {
            google_id: session.google_id,
            love: 1
        }
    })
    .then(
        favorites => Product.findAll({
            where: {
                product_id: (favorites.map(favorite => favorite.product_id))
            }
        })
        .then(
            products => res.render('products', {
                products,
                count: 3,
                user_name: session.full_name,
                admin: session.admin
            }))
        .catch(err => console.log(err))
    )
    .catch(err => console.log(err)));
router.get('/favorite', (req, res) =>
    Favorite.findAll({
        where: {
            google_id: session.google_id,
            favorite: 1
        }
    })
    .then(
        favorites => Product.findAll({
            where: {
                product_id: (favorites.map(favorite => favorite.product_id))
            }
        })
        .then(
            products => res.render('products', {
                products,
                count: 3,
                user_name: session.full_name,
                admin: session.admin
            }))
        .catch(err => console.log(err))
    )
    .catch(err => console.log(err)));
//for member to express there feeling
router.post('/banItem', (req, res) => {
    let { product_id } = req.body;
    Product.findAll({ where: { product_id: product_id } })
    .then(products => {
        if (products.length < 1) {
            res.send("Not Found");
        } else {
            products[0].update({ ban: 1 - products[0].ban });
            res.send("Updated");
        }
    })
    .catch(err => { res.send("Fail"); });
});
router.post('/expressFelling', (req, res) => {
//      UPDATE `products` SET `love` = '0' , `hate` = '0' , `favorite` = '0' WHERE 1;
    if(session.google_id){
        console.log("++++++++++++++++++++++++++++++++++++++++++++++++++++");
        let { product_id, felt } = req.body;
        Favorite.findOrCreate({
            where: { product_id: product_id, google_id:session.google_id } ,
            defaults: {hate: 0, love: 0, favorite:0}
        })
        .spread( (favorites,created) => {
            Product.findOne({ where: { product_id: product_id } })
                .then(products => {
                    products.hate -= favorites.hate;
                    products.love -= favorites.love;
                    products.favorite -= favorites.favorite;
                    favorites.hate = 0;
                    favorites.love = 0;
                    favorites.favorite = 0;
                    favorites.feeling = felt;
                    switch (felt) {
                        case "hate":
                            favorites.hate = 1;
                            products['hate'] += 1 ;
                            break;
                        case "love":
                            favorites.love = 1;
                            products.love += 1;
                            break;
                        case "favorite":
                            favorites.favorite = 1;
                            products.favorite += 1;
                            break;
                    }
                    products.update({
                        hate: products.hate,
                        love: products.love,
                        favorite: products.favorite
                    });
                    favorites.update({
                        hate: favorites.hate,
                        love: favorites.love,
                        favorite: favorites.favorite
                    });
                    res.send("success");
                });
        });
    }
});

// Display add Product form
router.get('/add', (req, res) => res.render('add', {
    user_name: session.full_name,
    admin: session.admin
}));
// Add a Product
router.post('/add', (req, res) => {
    var ress = "none";
    let {
        product_name,
        product_price,
        product_decription,
        product_id,
        product_url
    } = req.body;
    let errors = [];
    Product.findAll({
            where: {
                product_id: product_id
            }
        })
        .then(products => {
            if (products.length < 1) {
                Product.create({
                    product_name,
                    product_price,
                    product_decription,
                    product_id,
                    product_url
                });
                res.send("create");
            } else {
                if (products[0].ban == 1) {
                    res.send("ban");
                } else {
                    res.send("update");
                }
                products[0].update({
                    product_name: product_name,
                    product_price: product_price,
                    product_decription: product_decription,
                    product_id: product_id,
                    product_url: product_url
                });
            }
        })
        .catch(err => {
            res.send("fail");
        });
});

// Search for products
router.get('/search', (req, res) => {
    let {
        term
    } = req.query;
    Product.findAll({
            where: {
                id: term
            }
        })
        .then(products => res.render('products', {
            products,
            admin: session.admin
        }))
        .catch(err => console.log(err));
});

module.exports = router;
